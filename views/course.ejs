<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Studify - Course Selection</title>
  <link rel="stylesheet" href="css/styles.css">
</head>
<body id="course-selection-page">
  <div class="container">
    <header class="header">
      <div class="logo">
        <span class="logo-icon">🚀</span>
        <span class="logo-text">Studify</span>
      </div>
    </header>

    <main class="main-content">
      <div class="form-container">
        <h1 class="main-title">What would you like to learn today?</h1>
        <p class="subtitle">Tell us your subject and we'll create a personalized learning roadmap for you</p>
        
        <form id="course-form" class="course-form">
          <div class="input-group">
            <label for="course-name" class="input-label">Subject/Course</label>
            <input 
              type="text" 
              id="course-name" 
              name="course" 
              placeholder="e.g., JavaScript, Digital Marketing, Python..." 
              required
              class="course-input"
            >
          </div>

          <div class="duration-section">
            <label class="input-label">Learning Duration</label>
            <div class="duration-options">
              <label class="radio-option">
                <input type="radio" name="duration-type" value="recommended" checked>
                <span class="radio-custom"></span>
                <span class="radio-text">Recommended duration</span>
              </label>
              <label class="radio-option">
                <input type="radio" name="duration-type" value="custom">
                <span class="radio-custom"></span>
                <span class="radio-text">Custom duration</span>
              </label>
            </div>
            
            <div id="custom-duration" class="custom-duration-input" style="display: none;">
              <input 
                type="number" 
                id="duration-days" 
                placeholder="Number of days"
                min="1"
                max="365"
                class="duration-input"
              >
              <span class="duration-suffix">days</span>
            </div>
          </div>

          <button type="submit" class="submit-btn">
            <span class="btn-text">Create My Learning Path</span>
            <span class="btn-icon">→</span>
          </button>
        </form>

        <div id="loading-overlay" class="loading-overlay" style="display: none;">
          <div class="loading-content">
            <div class="loading-spinner"></div>
            <p class="loading-text" id="loading-main-text">Creating your personalized learning roadmap...</p>
            <p class="loading-subtext" id="loading-sub-text">This may take up to 3 minutes...</p>
            <div class="loading-progress">
              <div class="progress-bar">
                <div class="progress-fill" id="progress-fill"></div>
              </div>
              <p class="progress-text" id="progress-text">Initializing...</p>
            </div>
          </div>
        </div>

        <div id="error-message" class="error-message" style="display: none;">
          <p class="error-text">Something went wrong. Please try again.</p>
          <button id="retry-btn" class="retry-button">Try Again</button>
        </div>
      </div>
    </main>
  </div>

  <script>
    // Toggle custom duration input
    document.querySelectorAll('input[name="duration-type"]').forEach(radio => {
      radio.addEventListener('change', function() {
        const customDurationDiv = document.getElementById('custom-duration');
        if (this.value === 'custom') {
          customDurationDiv.style.display = 'flex';
          document.getElementById('duration-days').required = true;
        } else {
          customDurationDiv.style.display = 'none';
          document.getElementById('duration-days').required = false;
        }
      });
    });

    // Progress tracking for loading
    function updateLoadingProgress() {
      const progressFill = document.getElementById('progress-fill');
      const progressText = document.getElementById('progress-text');
      const loadingSubText = document.getElementById('loading-sub-text');
      let progress = 0;
      let stage = 0;
      
      const stages = [
        { text: "Initializing AI analysis...", duration: 10000 }, // 10s
        { text: "Analyzing course requirements...", duration: 30000 }, // 30s
        { text: "Generating personalized roadmap...", duration: 60000 }, // 60s
        { text: "Finalizing your learning path...", duration: 30000 }  // 30s
      ];
      
      const interval = setInterval(() => {
        if (stage < stages.length) {
          const currentStage = stages[stage];
          const stageProgress = Math.min(progress / currentStage.duration * 100, 100);
          const totalProgress = (stage * 25) + (stageProgress * 0.25);
          
          progressFill.style.width = `${totalProgress}%`;
          progressText.textContent = currentStage.text;
          
          // Update time estimate
          const remainingTime = Math.max(180 - Math.floor(progress / 1000), 10);
          loadingSubText.textContent = `Estimated time remaining: ${remainingTime} seconds...`;
          
          progress += 1000; // 1 second intervals
          
          if (progress >= currentStage.duration) {
            stage++;
            progress = 0;
          }
        }
        
        // Clear interval when request completes (handled elsewhere)
        if (!document.getElementById('loading-overlay').style.display || 
            document.getElementById('loading-overlay').style.display === 'none') {
          clearInterval(interval);
        }
      }, 1000);
      
      return interval;
    }

    // Enhanced fetch with timeout and retry
    async function fetchWithTimeout(url, options = {}, timeoutMs = 200000) { // 200 seconds timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
      
      try {
        const response = await fetch(url, {
          ...options,
          signal: controller.signal
        });
        clearTimeout(timeoutId);
        return response;
      } catch (error) {
        clearTimeout(timeoutId);
        if (error.name === 'AbortError') {
          throw new Error('Request timed out. Please try again.');
        }
        throw error;
      }
    }

    // Form submission with enhanced error handling
    document.getElementById("course-form").addEventListener("submit", async function(event) {
      event.preventDefault();
      
      const course = document.getElementById("course-name").value.trim();
      const durationType = document.querySelector('input[name="duration-type"]:checked').value;
      const customDays = document.getElementById("duration-days").value;
      
      // Validation
      if (!course) {
        alert("Please enter a course name");
        return;
      }
      
      if (durationType === 'custom' && (!customDays || customDays < 1)) {
        alert("Please enter a valid number of days");
        return;
      }
      
      // Show loading overlay and start progress tracking
      document.getElementById("loading-overlay").style.display = "flex";
      document.getElementById("error-message").style.display = "none";
      const progressInterval = updateLoadingProgress();
      
      try {
        console.log("🚀 Creating roadmap via backend...");
        
        const requestData = {
          course: course,
          durationType: durationType,
          customDays: durationType === 'custom' ? parseInt(customDays) : null
        };
        
        console.log("📤 Sending to backend:", requestData);
        
        // Use enhanced fetch with longer timeout
        const response = await fetchWithTimeout("/api/create-roadmap", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(requestData)
        }, 200000); // 200 second timeout
        
        console.log("📥 Response status:", response.status);
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({ error: `HTTP ${response.status}` }));
          throw new Error(errorData.details || errorData.error || `HTTP ${response.status}`);
        }
        
        const result = await response.json();
        console.log("✅ Roadmap created:", result);
        
        // Complete the progress bar
        document.getElementById('progress-fill').style.width = '100%';
        document.getElementById('progress-text').textContent = 'Roadmap created successfully!';
        
        // Short delay to show completion
        setTimeout(() => {
          document.getElementById("loading-overlay").style.display = "none";
          clearInterval(progressInterval);
          window.location.href = `/roadmap/${result.userCourseId}`;
        }, 1000);
        
      } catch (error) {
        console.error("💥 Request failed:", error);
        clearInterval(progressInterval);
        
        // Hide loading overlay
        document.getElementById("loading-overlay").style.display = "none";
        
        // Show error message
        const errorDiv = document.getElementById("error-message");
        const errorText = errorDiv.querySelector(".error-text");
        
        if (error.message.includes('Authentication required')) {
          errorText.textContent = "Please sign in to create a learning roadmap.";
          setTimeout(() => {
            window.location.href = '/signin';
          }, 2000);
        } else if (error.message.includes('timed out')) {
          errorText.textContent = "The request is taking longer than expected. Our AI is still working on your roadmap. Please try again in a few minutes.";
        } else {
          errorText.textContent = `Error: ${error.message}`;
        }
        
        errorDiv.style.display = "block";
      }
    });

    // Retry button functionality
    document.getElementById("retry-btn").addEventListener("click", function() {
      document.getElementById("error-message").style.display = "none";
    });

    // Check if user is authenticated on page load
    window.addEventListener('DOMContentLoaded', async function() {
      try {
        const authCheck = await fetch('/test-auth');
        const authData = await authCheck.json();
        
        if (!authData.isAuthenticated) {
          console.log("❌ User not authenticated, redirecting to signin");
          alert("Please sign in to access the course selection.");
          window.location.href = '/signin';
        } else {
          console.log("✅ User authenticated:", authData.user.email);
        }
      } catch (error) {
        console.error("Auth check failed:", error);
      }
    });
  </script>

  <style>
    .loading-subtext {
      font-size: 14px;
      opacity: 0.7;
      margin-top: 10px;
    }
    
    .loading-progress {
      margin-top: 20px;
      width: 100%;
      max-width: 400px;
    }
    
    .progress-bar {
      width: 100%;
      height: 8px;
      background-color: #f0f0f0;
      border-radius: 4px;
      overflow: hidden;
      margin-bottom: 10px;
    }
    
    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
      border-radius: 4px;
      transition: width 0.5s ease;
      width: 0%;
    }
    
    .progress-text {
      font-size: 14px;
      color: #666;
      text-align: center;
      margin: 0;
    }
    
    .error-message {
      background: #fee;
      border: 1px solid #fcc;
      border-radius: 8px;
      padding: 20px;
      margin-top: 20px;
      text-align: center;
    }
    
    .error-text {
      color: #c33;
      margin-bottom: 10px;
    }
    
    .retry-button {
      background: #ff4757;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
    }
    
    .retry-button:hover {
      background: #ff3742;
    }
    
    .loading-spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #667eea;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .loading-content {
      background: white;
      padding: 40px;
      border-radius: 12px;
      text-align: center;
      max-width: 500px;
      width: 90%;
    }
  </style>
</body>
</html>