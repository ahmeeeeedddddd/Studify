<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Studify - Learning Roadmap</title>
  <link rel="stylesheet" href="css/styles.css">
</head>
<body id="todo-list-page">
  <div class="container">
    <header class="header">
      <button class="back-btn" onclick="window.history.back()">
        <span class="back-icon">‚Üê</span>
      </button>
      <div class="logo">
        <span class="logo-icon">üöÄ</span>
        <span class="logo-text">Studify</span>
      </div>
    </header>

    <div class="roadmap-header">
      <div class="month-year" id="month-year">Jul, 2025</div>
      <div class="course-title" id="course-title">Loading...</div>
    </div>

    <!-- Progress Bar -->
    <div class="progress-container">
      <div class="progress-text">Progress: <span id="progress-percent">0%</span></div>
      <div class="progress-bar">
        <div class="progress-fill" id="progress-fill" style="width: 0%"></div>
      </div>
    </div>

    <div class="roadmap-container" id="roadmap-container">
      <div class="loading-state">
        <div class="loading-spinner"></div>
        <p>Loading your learning roadmap...</p>
      </div>
    </div>

    <!-- Navigation buttons -->
    <div class="navigation-footer" style="margin-top: 30px; text-align: center;">
      <button onclick="window.location.href='/course'" class="nav-btn secondary">Create New Roadmap</button>
      <button onclick="showMyRoadmaps()" class="nav-btn primary">My Roadmaps</button>
    </div>

    <!-- My Roadmaps Modal -->
    <div id="roadmaps-modal" class="modal" style="display: none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3>My Learning Roadmaps</h3>
          <span class="close-modal" onclick="hideMyRoadmaps()">&times;</span>
        </div>
        <div id="roadmaps-list" class="roadmaps-list">
          Loading...
        </div>
      </div>
    </div>
  </div>

  <script>
    let currentRoadmapData = null;
    let userCourseId = '<%= userCourseId %>';

    // Set current month/year
    function setCurrentMonthYear() {
      const now = new Date();
      const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
      const monthYear = monthNames[now.getMonth()] + ", " + now.getFullYear();
      document.getElementById('month-year').textContent = monthYear;
    }

    // Create day card element - Enhanced but based on working version
    function createDayCard(dayData, dayIndex) {
      console.log(`üèóÔ∏è Creating day card ${dayIndex + 1}:`, dayData);
      
      const dayCard = document.createElement('div');
      const completedTasks = (dayData.tasks && Array.isArray(dayData.tasks)) ? 
        dayData.tasks.filter(task => task && task.is_completed).length : 0;
      const totalTasks = (dayData.tasks && Array.isArray(dayData.tasks)) ? dayData.tasks.length : 0;
      const isDayCompleted = totalTasks > 0 && completedTasks === totalTasks;
      
      // Check for quiz/exam day
      const isQuiz = dayData.plan_type === 'quiz' || dayData.plan_type === 'final_exam' || 
                  (dayData.quiz && dayData.quiz.id);
      
      dayCard.className = `day-card ${isDayCompleted ? 'completed' : ''} ${isQuiz ? 'quiz' : ''}`;

      // Build title - handle multiple possible field names
      const dayTitle = dayData.plan_title || dayData.title || `Learning Day`;
      const dayDescription = dayData.plan_description || dayData.description || '';

      console.log(`üìù Day ${dayData.day_number} - Title: "${dayTitle}", Tasks: ${totalTasks}, Completed: ${completedTasks}`);

      dayCard.innerHTML = `
        <div class="day-checkbox ${isDayCompleted ? 'checked' : ''}">
          ${isDayCompleted ? '‚úì' : ''}
        </div>
        <div class="day-content">
          <h3 class="day-title ${isQuiz ? 'exam-title' : ''}">
            Day ${dayData.day_number}
          </h3>
          <p class="day-subtitle">${dayTitle}</p>
          ${dayDescription ? `<p class="day-description">${dayDescription}</p>` : ''}
          
          ${isQuiz && dayData.quiz ? `
            <div class="quiz-ready-section">
              <div class="quiz-ready-text">Ready to test your knowledge? Start Quiz</div>
            </div>
          ` : ''}
          
          <div class="day-details">
            ${dayData.tasks && dayData.tasks.length > 0 ? `
              <div class="tasks-section">
                <strong>Tasks:</strong>
                <ul class="day-topics">
                  ${dayData.tasks.map((task, taskIndex) => {
                    if (!task || !task.id) {
                      console.warn(`‚ö†Ô∏è Invalid task at index ${taskIndex}:`, task);
                      return '';
                    }
                    return `
                      <li class="task-item">
                        <input 
                          type="checkbox" 
                          class="task-checkbox" 
                          data-task-id="${task.id}"
                          data-day-index="${dayIndex}"
                          data-task-index="${taskIndex}"
                          ${task.is_completed ? 'checked' : ''}
                        >
                        <span class="task-text ${task.is_completed ? 'completed-task' : ''}">${task.title || 'Untitled Task'}</span>
                        ${task.estimated_time ? `<small class="task-time">(~${task.estimated_time} min)</small>` : ''}
                      </li>
                    `;
                  }).join('')}
                </ul>
              </div>
            ` : ''}

            ${dayData.resources && Array.isArray(dayData.resources) && dayData.resources.length > 0 ? `
              <div class="resources-section">
                <strong>Resources:</strong>
                <ul class="day-resources">
                  ${dayData.resources.map(resource => {
                    if (!resource || !resource.url) {
                      console.warn('‚ö†Ô∏è Invalid resource:', resource);
                      return '';
                    }
                    return `
                      <li>
                        <a href="${resource.url}" target="_blank" rel="noopener noreferrer">
                          ${getResourceIcon(resource.type)} ${resource.name || 'Resource'}
                        </a>
                      </li>
                    `;
                  }).join('')}
                </ul>
              </div>
            ` : ''}
            
            ${dayData.study_hours ? `<div class="day-time">‚è± ${dayData.study_hours} hour(s)</div>` : ''}
          </div>
        </div>
        <div class="day-arrow">‚ñ∂</div>
      `;

      // Add task completion handlers
      const taskCheckboxes = dayCard.querySelectorAll('.task-checkbox');
      const dayCheckbox = dayCard.querySelector('.day-checkbox');

      taskCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', async function() {
          const taskId = this.getAttribute('data-task-id');
          const isCompleted = this.checked;
          
          console.log(`üìù Task ${taskId} completion changed to:`, isCompleted);
          
          try {
            await updateTaskCompletion(taskId, isCompleted);
            
            // Update visual state
            const taskSpan = this.nextElementSibling;
            if (isCompleted) {
              taskSpan.classList.add('completed-task');
            } else {
              taskSpan.classList.remove('completed-task');
            }
            
            // Check if all tasks in this day are completed
            const dayTasks = [...taskCheckboxes];
            const allCompleted = dayTasks.every(t => t.checked);
            
            console.log(`üìä Day ${dayData.day_number} task completion: ${dayTasks.filter(t => t.checked).length}/${dayTasks.length}`);
            
            if (allCompleted && !dayCheckbox.classList.contains('checked')) {
              dayCheckbox.classList.add('checked');
              dayCheckbox.textContent = '‚úì';
              dayCard.classList.add('completed');
              console.log(`‚úÖ Day ${dayData.day_number} marked as completed`);
            } else if (!allCompleted && dayCheckbox.classList.contains('checked')) {
              dayCheckbox.classList.remove('checked');
              dayCheckbox.textContent = '';
              dayCard.classList.remove('completed');
              console.log(`üîÑ Day ${dayData.day_number} marked as incomplete`);
            }
            
            // Update overall progress
            updateProgress();
            
          } catch (error) {
            console.error('üí• Failed to update task:', error);
            // Revert checkbox state
            this.checked = !isCompleted;
            alert('Failed to update task. Please try again.');
          }
        });
      });

      // Handle expand/collapse toggle with arrow AND clicking on day card
      const toggleExpansion = (e) => {
        e.stopPropagation();
        dayCard.classList.toggle('expanded');
      };

      const arrow = dayCard.querySelector('.day-arrow');
      arrow.addEventListener('click', toggleExpansion);
      
      // Make the whole day card clickable for expansion (except checkboxes and links)
      dayCard.addEventListener('click', (e) => {
        if (!e.target.matches('input, a, button')) {
          toggleExpansion(e);
        }
      });

      // Handle quiz button click
      const quizSection = dayCard.querySelector('.quiz-ready-section');
      if (quizSection) {
        quizSection.addEventListener('click', (e) => {
          e.stopPropagation();
          startQuiz(userCourseId, dayData.day_number);
        });
      }

      return dayCard;
    }

    // Get resource icon based on type
    function getResourceIcon(type) {
      const icons = {
        'video': 'üé•',
        'document': 'üìÑ',
        'link': 'üîó',
        'book': 'üìö',
        'article': 'üì∞'
      };
      return icons[type] || 'üîó';
    }

    // Start quiz function
    function startQuiz(userCourseId, dayNumber) {
      console.log(`üß† Starting quiz for course ${userCourseId}, day ${dayNumber}`);
      window.location.href = `/quiz?courseId=${userCourseId}&day=${dayNumber}`;
    }

    // Update task completion in database
    async function updateTaskCompletion(taskId, isCompleted) {
      console.log(`üîÑ Updating task ${taskId} completion to:`, isCompleted);
      
      const response = await fetch(`/api/task/${taskId}/complete`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ is_completed: isCompleted })
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Task update failed:', response.status, errorText);
        throw new Error(`Failed to update task: ${response.status}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Task update successful:', result);
      return result;
    }

    // Load roadmap from database - Enhanced with debugging
    async function displayRoadmap() {
      const container = document.getElementById('roadmap-container');
      const courseTitle = document.getElementById('course-title');
      
      try {
        if (!userCourseId) {
          throw new Error('No roadmap ID provided from EJS template');
        }

        console.log('üìñ Loading roadmap data for ID:', userCourseId);
        
        // Fetch roadmap data from backend
        const response = await fetch(`/api/roadmap/${userCourseId}`);
        
        console.log('üì° API response status:', response.status);
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error('‚ùå API error response:', errorText);
          
          if (response.status === 404) {
            throw new Error('Roadmap not found');
          } else if (response.status === 401) {
            throw new Error('Please sign in to view your roadmap');
          } else {
            throw new Error(`Failed to load roadmap: ${response.status} - ${errorText}`);
          }
        }
        
        const data = await response.json();
        console.log('‚úÖ Roadmap data loaded successfully:', data);
        console.log('üìä Daily plans received:', data.dailyPlans ? data.dailyPlans.length : 'none');
        
        currentRoadmapData = data;
        
        // Update page title if not already set by EJS
        if (data.roadmap && data.roadmap.course_title) {
          courseTitle.textContent = data.roadmap.course_title;
        }
        
        // Render the daily plans
        renderDays(data.dailyPlans);
        
      } catch (error) {
        console.error("üí• Error loading roadmap:", error);
        
        let errorMessage = "Something went wrong loading your roadmap.";
        let redirectPath = "/course";
        
        if (error.message.includes('sign in')) {
          errorMessage = "Please sign in to view your roadmap.";
          redirectPath = "/signin";
        } else if (error.message.includes('not found')) {
          errorMessage = "This roadmap was not found or you don't have access to it.";
        } else if (error.message.includes('No roadmap ID')) {
          errorMessage = "No roadmap specified. Please select or create a roadmap first.";
        }
        
        container.innerHTML = `
          <div class="error-state">
            <h3>Unable to Load Roadmap</h3>
            <p>${errorMessage}</p>
            <p class="debug-info">Debug: ${error.message}</p>
            <button onclick="window.location.href='${redirectPath}'" class="retry-btn">
              ${redirectPath === '/signin' ? 'Sign In' : 'Create New Roadmap'}
            </button>
          </div>
        `;
      }
    }

    // Render days in the container - Enhanced with debugging
    function renderDays(dailyPlans) {
      const container = document.getElementById('roadmap-container');
      
      console.log('üé® Rendering daily plans:', dailyPlans);
      
      container.innerHTML = '';
      
      if (!dailyPlans || !Array.isArray(dailyPlans) || dailyPlans.length === 0) {
        console.warn('‚ö†Ô∏è No daily plans to render');
        container.innerHTML = `
          <div class="empty-state">
            <h3>No learning plan available</h3>
            <p>This roadmap doesn't have any daily plans yet.</p>
            <p class="debug-info">Debug: dailyPlans = ${JSON.stringify(dailyPlans)}</p>
          </div>
        `;
        return;
      }
      
      console.log(`üèóÔ∏è Creating ${dailyPlans.length} day cards`);
      
      dailyPlans.forEach((day, index) => {
        try {
          const dayCard = createDayCard(day, index);
          container.appendChild(dayCard);
        } catch (error) {
          console.error(`üí• Error creating day card ${index + 1}:`, error, day);
          
          // Create error card
          const errorCard = document.createElement('div');
          errorCard.className = 'day-card error';
          errorCard.innerHTML = `
            <div class="day-content">
              <h3 class="day-title">Day ${day.day_number || index + 1} - Error</h3>
              <p class="error-message">Failed to load this day's content</p>
              <details>
                <summary>Debug Info</summary>
                <pre>${JSON.stringify(day, null, 2)}</pre>
              </details>
            </div>
          `;
          container.appendChild(errorCard);
        }
      });
      
      // Update progress after rendering
      setTimeout(() => {
        console.log('üìä Updating progress after render');
        updateProgress();
      }, 100);
    }

    // Update progress calculation
    function updateProgress() {
      if (!currentRoadmapData || !currentRoadmapData.dailyPlans) {
        console.log('üìä No roadmap data for progress calculation');
        document.getElementById('progress-percent').textContent = '0%';
        document.getElementById('progress-fill').style.width = '0%';
        return;
      }
      
      let totalTasks = 0;
      let completedTasks = 0;
      
      currentRoadmapData.dailyPlans.forEach(day => {
        if (day.tasks && Array.isArray(day.tasks)) {
          totalTasks += day.tasks.length;
          completedTasks += day.tasks.filter(task => task && task.is_completed).length;
        }
      });
      
      const percent = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;
      
      console.log(`üìä Progress updated: ${completedTasks}/${totalTasks} tasks (${percent}%)`);
      
      document.getElementById('progress-percent').textContent = percent + '%';
      document.getElementById('progress-fill').style.width = percent + '%';
    }

    // Show user's roadmaps modal
    async function showMyRoadmaps() {
      const modal = document.getElementById('roadmaps-modal');
      const listContainer = document.getElementById('roadmaps-list');
      
      modal.style.display = 'block';
      listContainer.innerHTML = 'Loading your roadmaps...';
      
      try {
        const response = await fetch('/api/my-roadmaps');
        if (!response.ok) throw new Error('Failed to load roadmaps');
        
        const data = await response.json();
        
        if (data.roadmaps.length === 0) {
          listContainer.innerHTML = `
            <div class="empty-roadmaps">
              <p>You haven't created any roadmaps yet.</p>
              <button onclick="window.location.href='/course'" class="create-btn">Create Your First Roadmap</button>
            </div>
          `;
        } else {
          listContainer.innerHTML = data.roadmaps.map(roadmap => `
            <div class="roadmap-item" onclick="window.location.href='/roadmap?id=${roadmap.user_course_id}'">
              <div class="roadmap-title">${roadmap.course_title}</div>
              <div class="roadmap-progress">${Math.round(roadmap.progress_percent || 0)}% complete</div>
              <div class="roadmap-duration">${roadmap.custom_duration_days} days ‚Ä¢ Started ${new Date(roadmap.start_date).toLocaleDateString()}</div>
            </div>
          `).join('');
        }
      } catch (error) {
        console.error('Error loading roadmaps:', error);
        listContainer.innerHTML = '<p>Error loading roadmaps. Please try again.</p>';
      }
    }

    // Hide roadmaps modal
    function hideMyRoadmaps() {
      document.getElementById('roadmaps-modal').style.display = 'none';
    }

    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
      const modal = document.getElementById('roadmaps-modal');
      if (event.target === modal) {
        hideMyRoadmaps();
      }
    });

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      console.log('üöÄ Page loaded, initializing...');
      setCurrentMonthYear();
      displayRoadmap();
    });
  </script>

  <style>
    .completed-task {
      text-decoration: line-through;
      opacity: 0.6;
    }
    
    .task-time {
      color: #666;
      font-style: italic;
      margin-left: 10px;
    }
    
    .navigation-footer {
      padding: 20px 0;
    }
    
    .nav-btn {
      padding: 12px 24px;
      margin: 0 10px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 14px;
      text-decoration: none;
      display: inline-block;
    }
    
    .nav-btn.primary {
      background: #007bff;
      color: white;
    }
    
    .nav-btn.secondary {
      background: #f8f9fa;
      color: #333;
      border: 1px solid #ddd;
    }

    /* Quiz Styles */
    .quiz-section {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 15px;
      border-radius: 8px;
      margin: 15px 0;
      text-align: center;
    }
    
    .quiz-info {
      margin: 0 0 10px 0;
      font-size: 14px;
    }
    
    .quiz-btn {
      background: rgba(255, 255, 255, 0.2);
      color: white;
      border: 2px solid rgba(255, 255, 255, 0.3);
      padding: 10px 20px;
      border-radius: 25px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
    }
    
    .quiz-btn:hover {
      background: rgba(255, 255, 255, 0.3);
      border-color: rgba(255, 255, 255, 0.5);
      transform: translateY(-1px);
    }
    
    .exam-title {
      color: #e74c3c;
      font-weight: bold;
    }
    
    .day-card.quiz, .day-card.final_exam {
      border-left: 4px solid #e74c3c;
    }

    /* Resource Styles */
    .day-resources-container {
      margin-top: 15px;
    }
    
    .day-resources {
      list-style: none;
      padding: 0;
      margin: 10px 0;
    }
    
    .day-resources li {
      margin: 5px 0;
    }
    
    .day-resources a {
      color: #667eea;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 5px;
    }
    
    .day-resources a:hover {
      text-decoration: underline;
    }

    /* Debug and Error Styles */
    .debug-info {
      font-size: 12px;
      color: #666;
      font-family: monospace;
      margin-top: 10px;
      padding: 10px;
      background: #f8f9fa;
      border-radius: 4px;
    }
    
    .day-card.error {
      border-left: 4px solid #dc3545;
      background-color: #fff5f5;
    }
    
    .error-message {
      color: #dc3545;
      font-style: italic;
    }
    
    details {
      margin-top: 10px;
    }
    
    summary {
      cursor: pointer;
      color: #666;
      font-size: 12px;
    }
    
    pre {
      font-size: 10px;
      background: #f1f1f1;
      padding: 10px;
      border-radius: 4px;
      overflow-x: auto;
    }
    
    .no-tasks {
      color: #666;
      font-style: italic;
    }

    /* Loading and other existing styles */
    .loading-spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #667eea;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .loading-state, .error-state, .empty-state {
      text-align: center;
      padding: 60px 20px;
    }
    
    .error-state h3 {
      color: #e74c3c;
      margin-bottom: 15px;
    }
    
    .retry-btn {
      background: #667eea;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 16px;
      margin-top: 15px;
    }
    
    .retry-btn:hover {
      background: #5a6fd8;
    }
    
    /* Modal and Progress Bar styles remain the same */
    .modal {
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
    }
    
    .modal-content {
      background-color: white;
      margin: 5% auto;
      padding: 20px;
      border-radius: 12px;
      width: 80%;
      max-width: 600px;
      max-height: 80vh;
      overflow-y: auto;
    }
    
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      border-bottom: 1px solid #eee;
      padding-bottom: 10px;
    }
    
    .close-modal {
      font-size: 28px;
      cursor: pointer;
      color: #999;
    }
    
    .roadmap-item {
      padding: 15px;
      border: 1px solid #ddd;
      border-radius: 8px;
      margin: 10px 0;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    
    .roadmap-item:hover {
      background-color: #f8f9fa;
    }
    
    .roadmap-title {
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .roadmap-progress {
      color: #007bff;
      font-size: 14px;
    }
    
    .roadmap-duration {
      color: #666;
      font-size: 12px;
      margin-top: 5px;
    }
    
    .empty-roadmaps {
      text-align: center;
      padding: 40px 20px;
    }
    
    .create-btn {
      background: #28a745;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 8px;
      cursor: pointer;
      margin-top: 15px;
    }

    .progress-container {
      margin: 20px 0;
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .progress-text {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
      font-weight: 600;
      color: #333;
    }
    
    .progress-bar {
      width: 100%;
      height: 8px;
      background-color: #f0f0f0;
      border-radius: 4px;
      overflow: hidden;
    }
    
    .progress-fill {
      height: 100%;
      background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
      border-radius: 4px;
      transition: width 0.5s ease;
      width: 0%;
    }
  </style>
</body>
</html>